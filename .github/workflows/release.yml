name: Release

on:
  push:
    tags:
      - 'v*.*.*'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}
    steps:
    - name: Checkout sources
      uses: actions/checkout@v4

    - name: Extract version from tag
      id: extract_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Bomb ${{ steps.extract_version.outputs.VERSION }}
        body: |
          ## ðŸ’£ Bomb ${{ steps.extract_version.outputs.VERSION }}

          High-performance HTTP and WebSocket stress testing tool.

          ### ðŸš€ Downloads
          Download the appropriate binary for your platform below.

          ### âœ¨ Features
          - HTTP and WebSocket stress testing
          - Concurrent client support
          - Real-time metrics and reporting
          - Cross-platform compatibility

          ### ðŸ“‹ Usage
          ```bash
          # WebSocket test
          bomb -t wss://echo.websocket.org -c 5 -n 100

          # HTTP test
          bomb -t https://httpbin.org/get -m http -c 3 -n 50
          ```

          See the [README](https://github.com/${{ github.repository }}) for complete documentation.
        draft: false
        prerelease: false

  build-release:
    name: Build Release
    runs-on: ${{ matrix.os }}
    needs: create-release
    strategy:
      matrix:
        build: [linux, windows, macos]
        include:
          - build: linux
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            archive-name: bomb-linux-x86_64.tar.gz
          - build: windows
            os: windows-latest
            target: x86_64-pc-windows-msvc
            archive-name: bomb-windows-x86_64.zip
          - build: macos
            os: macos-latest
            target: x86_64-apple-darwin
            archive-name: bomb-macos-x86_64.tar.gz

    steps:
    - name: Checkout sources
      uses: actions/checkout@v4

    - name: Install stable toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-release-${{ hashFiles('**/Cargo.lock') }}

    - name: Run quality checks
      run: |
        cargo fmt --all -- --check
        cargo clippy --all-features --target ${{ matrix.target }} -- -D warnings
        cargo test --target ${{ matrix.target }}

    - name: Build release binary
      run: cargo build --release --target ${{ matrix.target }}

    - name: Create archive (Unix)
      if: matrix.build != 'windows'
      run: |
        cd target/${{ matrix.target }}/release
        tar czf ../../../${{ matrix.archive-name }} bomb
        cd ../../..
        shasum -a 256 ${{ matrix.archive-name }} > ${{ matrix.archive-name }}.sha256

    - name: Create archive (Windows)
      if: matrix.build == 'windows'
      run: |
        cd target/${{ matrix.target }}/release
        7z a ../../../${{ matrix.archive-name }} bomb.exe
        cd ../../..
        certutil -hashfile ${{ matrix.archive-name }} SHA256 > ${{ matrix.archive-name }}.sha256

    - name: Upload release archive
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./${{ matrix.archive-name }}
        asset_name: ${{ matrix.archive-name }}
        asset_content_type: application/octet-stream

    - name: Upload checksum
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./${{ matrix.archive-name }}.sha256
        asset_name: ${{ matrix.archive-name }}.sha256
        asset_content_type: text/plain

  publish-crates:
    name: Publish to Crates.io
    runs-on: ubuntu-latest
    needs: [create-release, build-release]
    steps:
    - name: Checkout sources
      uses: actions/checkout@v4

    - name: Install stable toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ubuntu-latest-cargo-publish-${{ hashFiles('**/Cargo.lock') }}

    - name: Run final quality checks
      run: |
        cargo fmt --all -- --check
        cargo clippy --all-features -- -D warnings
        cargo test

    - name: Verify package can be published
      run: cargo package --verbose

    - name: Publish to crates.io
      run: cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}

  post-release:
    name: Post Release Tasks
    runs-on: ubuntu-latest
    needs: [create-release, build-release, publish-crates]
    steps:
    - name: Checkout sources
      uses: actions/checkout@v4

    - name: Update release with crates.io info
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const { data: release } = await github.rest.repos.getRelease({
            owner: context.repo.owner,
            repo: context.repo.repo,
            release_id: ${{ needs.create-release.outputs.release_id }}
          });

          const newBody = release.body + '\n\n### ðŸ“¦ Installation\n```bash\ncargo install bomb\n```\n\n*Also available on [crates.io](https://crates.io/crates/bomb)*';

          await github.rest.repos.updateRelease({
            owner: context.repo.owner,
            repo: context.repo.repo,
            release_id: ${{ needs.create-release.outputs.release_id }},
            body: newBody
          });